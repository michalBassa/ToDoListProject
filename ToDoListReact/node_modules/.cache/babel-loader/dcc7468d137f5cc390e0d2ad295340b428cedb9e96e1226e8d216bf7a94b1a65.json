{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ToDoListProject\\\\ToDoListReact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import service from './service.js';\n\n// function App() {\n//   const [newTodo, setNewTodo] = useState(\"\");\n//   const [todos, setTodos] = useState([]);\n\n//   async function getTodos() {\n//     const todos = await service.getTasks();\n//     setTodos(todos);\n//   }\n\n//   async function createTodo(e) {\n//     e.preventDefault();\n//     await service.addTask(newTodo);\n//     setNewTodo(\"\");//clear input\n//     await getTodos();//refresh tasks list (in order to see the new one)\n//   }\n\n//   async function updateCompleted(todo, isComplete) {\n//     await service.setCompleted(todo.id, isComplete);\n//     await getTodos();//refresh tasks list (in order to see the updated one)\n//   }\n\n//   async function deleteTodo(id) {\n//     await service.deleteTask(id);\n//     await getTodos();//refresh tasks list\n//   }\n\n//   useEffect(() => {\n//     getTodos();\n//   }, []);\n\n//   return (\n//     <section className=\"todoapp\">\n//       <header className=\"header\">\n//         <h1>todos</h1>\n//         <form onSubmit={createTodo}>\n//           <input className=\"new-todo\" placeholder=\"Well, let's take on the day\" value={newTodo} onChange={(e) => setNewTodo(e.target.value)} />\n//         </form>\n//       </header>\n//       <section className=\"main\" style={{ display: \"block\" }}>\n//         <ul className=\"todo-list\">\n//           {todos.map(todo => {\n//             return (\n//               <li className={todo.isComplete ? \"completed\" : \"\"} key={todo.id}>\n//                 <div className=\"view\">\n//                   <input className=\"toggle\" type=\"checkbox\" defaultChecked={todo.isComplete} onChange={(e) => updateCompleted(todo, e.target.checked)} />\n//                   <label>{todo.name}</label>\n//                   <button className=\"destroy\" onClick={() => deleteTodo(todo.id)}></button>\n//                 </div>\n//               </li>\n//             );\n//           })}\n//         </ul>\n//       </section>\n//     </section >\n//   );\n// }\n\n// export default App;\nimport React, { useEffect, useState } from 'react';\nimport service from './service.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  function handleResponseError(error) {\n    console.error(error.message);\n  }\n  fetch('http://localhost:3000/').then(response => {\n    if (!response.ok) {\n      return handleResponseError(new Error(response.statusText));\n    }\n  });\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  async function getTodos() {\n    const todos = await service.getTasks();\n    setTodos(todos);\n  }\n  async function createTodo(e) {\n    e.preventDefault();\n    await service.addTask(newTodo);\n    setNewTodo(\"\"); //clear input\n    await getTodos(); //refresh tasks list (in order to see the new one)\n  }\n  async function updateCompleted(todo, isComplete) {\n    await service.setCompleted(todo.id, isComplete, todo.name); // Pass only the isComplete value\n    await getTodos();\n  }\n  async function deleteTodo(id) {\n    await service.deleteTask(id);\n    await getTodos(); //refresh tasks list\n  }\n  useEffect(() => {\n    getTodos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"todoapp\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: createTodo,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"new-todo\",\n          placeholder: \"Well, let's take on the day\",\n          value: newTodo,\n          onChange: e => setNewTodo(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      style: {\n        display: \"block\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"todo-item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"toggle\",\n              type: \"checkbox\",\n              checked: todo.isComplete,\n              onChange: e => updateCompleted(todo, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                textDecoration: todo.isComplete ? \"line-through\" : \"\"\n              },\n              children: todo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"destroy\",\n              onClick: () => deleteTodo(todo.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n\n  //           );\n  //         })}\n  //       </ul>\n  //     </section>\n  //   </section >\n  // );\n}\n_s(App, \"GJV7m7gNoZmXOQ49S2kx79/RCYY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","service","jsxDEV","_jsxDEV","App","_s","handleResponseError","error","console","message","fetch","then","response","ok","Error","statusText","newTodo","setNewTodo","todos","setTodos","getTodos","getTasks","createTodo","e","preventDefault","addTask","updateCompleted","todo","isComplete","setCompleted","id","name","deleteTodo","deleteTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","style","display","map","type","checked","textDecoration","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/ToDoListProject/ToDoListReact/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import service from './service.js';\r\n\r\n// function App() {\r\n//   const [newTodo, setNewTodo] = useState(\"\");\r\n//   const [todos, setTodos] = useState([]);\r\n\r\n//   async function getTodos() {\r\n//     const todos = await service.getTasks();\r\n//     setTodos(todos);\r\n//   }\r\n\r\n//   async function createTodo(e) {\r\n//     e.preventDefault();\r\n//     await service.addTask(newTodo);\r\n//     setNewTodo(\"\");//clear input\r\n//     await getTodos();//refresh tasks list (in order to see the new one)\r\n//   }\r\n\r\n//   async function updateCompleted(todo, isComplete) {\r\n//     await service.setCompleted(todo.id, isComplete);\r\n//     await getTodos();//refresh tasks list (in order to see the updated one)\r\n//   }\r\n\r\n//   async function deleteTodo(id) {\r\n//     await service.deleteTask(id);\r\n//     await getTodos();//refresh tasks list\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getTodos();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <section className=\"todoapp\">\r\n//       <header className=\"header\">\r\n//         <h1>todos</h1>\r\n//         <form onSubmit={createTodo}>\r\n//           <input className=\"new-todo\" placeholder=\"Well, let's take on the day\" value={newTodo} onChange={(e) => setNewTodo(e.target.value)} />\r\n//         </form>\r\n//       </header>\r\n//       <section className=\"main\" style={{ display: \"block\" }}>\r\n//         <ul className=\"todo-list\">\r\n//           {todos.map(todo => {\r\n//             return (\r\n//               <li className={todo.isComplete ? \"completed\" : \"\"} key={todo.id}>\r\n//                 <div className=\"view\">\r\n//                   <input className=\"toggle\" type=\"checkbox\" defaultChecked={todo.isComplete} onChange={(e) => updateCompleted(todo, e.target.checked)} />\r\n//                   <label>{todo.name}</label>\r\n//                   <button className=\"destroy\" onClick={() => deleteTodo(todo.id)}></button>\r\n//                 </div>\r\n//               </li>\r\n//             );\r\n//           })}\r\n//         </ul>\r\n//       </section>\r\n//     </section >\r\n//   );\r\n// }\r\n\r\n// export default App;\r\nimport React, { useEffect, useState } from 'react';\r\nimport service from './service.js';\r\nfunction App() {\r\n  function handleResponseError(error) {\r\n    console.error(error.message);\r\n  }\r\n  fetch('http://localhost:3000/')\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return handleResponseError(new Error(response.statusText));\r\n      }\r\n    });\r\n\r\n  const [newTodo, setNewTodo] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n \r\n  async function getTodos() {\r\n    const todos = await service.getTasks();\r\n    setTodos(todos);\r\n  }\r\n\r\n  async function createTodo(e) {\r\n    e.preventDefault();\r\n    await service.addTask(newTodo);\r\n    setNewTodo(\"\");//clear input\r\n    await getTodos();//refresh tasks list (in order to see the new one)\r\n  }\r\n\r\n async function updateCompleted(todo, isComplete) {\r\n  await service.setCompleted(todo.id, isComplete,todo.name); // Pass only the isComplete value\r\n  await getTodos();\r\n}\r\n\r\n\r\n  async function deleteTodo(id) {\r\n    await service.deleteTask(id);\r\n    await getTodos();//refresh tasks list\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, []);\r\n  return (\r\n    <section className=\"todoapp\">\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <form onSubmit={createTodo}>\r\n          <input\r\n            className=\"new-todo\"\r\n            placeholder=\"Well, let's take on the day\"\r\n            value={newTodo}\r\n            onChange={(e) => setNewTodo(e.target.value)}\r\n          />\r\n        </form>\r\n      </header>\r\n      <section className=\"main\" style={{ display: \"block\" }}>\r\n        <ul className=\"todo-list\">\r\n          {todos.map((todo) => (\r\n            <li className=\"todo-item\" key={todo.id}>\r\n              <div className=\"view\">\r\n                <input\r\n                  className=\"toggle\"\r\n                  type=\"checkbox\"\r\n                  checked={todo.isComplete}\r\n                  onChange={(e) => updateCompleted(todo, e.target.checked)}\r\n                />\r\n                <label\r\n                  style={{\r\n                    textDecoration: todo.isComplete ? \"line-through\" : \"\",\r\n                  }}\r\n                >\r\n                  {todo.name}\r\n                </label>\r\n                <button className=\"destroy\" onClick={() => deleteTodo(todo.id)}></button>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    </section>\r\n  );\r\n  \r\n  //           );\r\n  //         })}\r\n  //       </ul>\r\n  //     </section>\r\n  //   </section >\r\n  // );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}